events { }
http{
    server {
        listen 80;
        listen [::]:80;
        server_name ${DOMAIN} www.${DOMAIN};

        # Gestion de la validation Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }


        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;

        server_name ${DOMAIN} www.${DOMAIN};

        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;


        location / {
            proxy_pass http://nextjs-app:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }


    server {
        listen 80;
        listen [::]:80;
        server_name api.${DOMAIN};

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;

        server_name api.${DOMAIN};


        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;


        location / {

            if ($request_method = 'OPTIONS') {
                    # Répondre directement aux requêtes OPTIONS avec les en-têtes CORS nécessaires
                    # L'origine est reflétée car allow_credentials=True nécessite une origine spécifique
                    add_header 'Access-Control-Allow-Origin' "$http_origin" always;
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
                    # Listez tous les en-têtes que votre frontend pourrait envoyer
                    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, User-Agent, DNT, Cache-Control, X-Mx-ReqToken, Keep-Alive, X-Requested-With, If-Modified-Since, token' always;
                    # Si vous utilisez des cookies ou l'authentification Authorization
                    add_header 'Access-Control-Allow-Credentials' 'true' always;
                    # Durée pendant laquelle la réponse preflight peut être mise en cache par le navigateur
                    add_header 'Access-Control-Max-Age' 1728000;
                    # Type de contenu pour la réponse preflight
                    add_header 'Content-Type' 'text/plain charset=UTF-8';
                    add_header 'Content-Length' 0;
                    # Répondre avec 204 No Content pour OPTIONS
                    return 204;
                }




             proxy_pass http://api:8000;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
        }


    }
}